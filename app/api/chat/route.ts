import { OpenAI } from "openai";
import {
  S3Client,
  PutObjectCommand,
  GetObjectCommand,
} from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";
import { NextResponse } from "next/server";
import { promises as fs } from "fs";
import { exec } from "child_process";
import { promisify } from "util";
import path from "path";
import os from "os";

const execAsync = promisify(exec);

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Initialize S3 client
const s3Client = new S3Client({
  region: process.env.AWS_REGION!,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
  },
});

/**
 * Generates a PDF from LaTeX content using Docker
 * @param title The title of the document
 * @param content The LaTeX content to compile
 * @returns Promise<Buffer> The compiled PDF as a buffer
 */
async function generatePDF(title: string, content: string): Promise<Buffer> {
  const tempDir = await fs.mkdtemp(path.join(os.tmpdir(), "latex-"));
  console.log("Created temp directory:", tempDir);

  try {
    // Create required directories
    await fs.mkdir(path.join(tempDir, "content"), { recursive: true });
    await fs.mkdir(path.join(tempDir, "output"), { recursive: true });
    console.log("Created content and output directories");

    // Format the content with title and date
    const currentDate = new Date().toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });

    const formattedContent = `\\title{${title}}
\\author{Generated by AI Assistant}
\\date{${currentDate}}
\\maketitle

${content}`;

    // Write the content to the input file
    const contentPath = path.join(tempDir, "content", "input.tex");
    await fs.writeFile(contentPath, formattedContent, "utf-8");
    console.log("Wrote content to:", contentPath);

    // Run Docker container with correct volume mounts
    const dockerCmd = `docker run --rm \
      -v "${path.join(tempDir, "content")}:/latex/content:ro" \
      -v "${path.join(tempDir, "output")}:/latex/output" \
      latex-service`;

    console.log("Running Docker command:", dockerCmd);
    const { stdout, stderr } = await execAsync(dockerCmd);

    if (stdout) console.log("Docker stdout:", stdout);
    if (stderr) console.warn("Docker stderr:", stderr);

    // Verify output directory contents
    const outputDir = path.join(tempDir, "output");
    const outputFiles = await fs.readdir(outputDir);
    console.log("Output directory contents:", outputFiles);

    // Read generated PDF from output directory
    const pdfPath = path.join(tempDir, "output", "output.pdf");
    const pdfBuffer = await fs.readFile(pdfPath);
    console.log("Successfully read PDF, size:", pdfBuffer.length);

    return pdfBuffer;
  } catch (error: any) {
    console.error("PDF Generation Error:", error);
    throw new Error(`Failed to generate PDF: ${error.message}`);
  } finally {
    // Clean up temp directory
    await fs
      .rm(tempDir, { recursive: true, force: true })
      .catch((err) => console.error("Cleanup error:", err));
  }
}

/**
 * POST handler for the /api/chat endpoint
 */
export async function POST(req: Request) {
  try {
    const { message } = await req.json();
    if (!message) {
      return NextResponse.json(
        { error: "Message is required" },
        { status: 400 }
      );
    }

    // Extract title from message or use default
    const title =
      message.split("\n")[0].replace(/[#*`]/g, "").trim() ||
      "Technical Documentation";

    // Escape special LaTeX characters in title
    const escapedTitle = title.replace(/([&%$#_{}~^\\])/g, "\\$1");

    console.log("Processing request:", {
      title: escapedTitle,
    });

    // Get GPT response
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content:
            "You are a knowledgeable assistant. Format your responses in LaTeX. Use \\section{} for main headings and \\subsection{} for subheadings. Use $$ for display math and $ for inline math. Use \\begin{lstlisting}[language=C++] for code examples. Do not use markdown formatting.",
        },
        { role: "user", content: message },
      ],
      temperature: 0.7,
    });

    const response = completion.choices[0].message.content;
    if (!response) {
      throw new Error("No response from GPT");
    }

    console.log("Got GPT response, generating PDF...");

    // Generate PDF with title and content
    const pdfBuffer = await generatePDF(escapedTitle, response);

    // Upload to S3
    const key = `pdfs/${Date.now()}.pdf`;
    await s3Client.send(
      new PutObjectCommand({
        Bucket: process.env.AWS_BUCKET_NAME,
        Key: key,
        Body: pdfBuffer,
        ContentType: "application/pdf",
      })
    );

    console.log("PDF uploaded to S3:", key);

    // Generate a signed URL that expires in 24 hours
    const command = new GetObjectCommand({
      Bucket: process.env.AWS_BUCKET_NAME,
      Key: key,
    });
    const signedUrl = await getSignedUrl(s3Client, command, {
      expiresIn: 86400,
    });

    return NextResponse.json({
      message: response,
      pdfUrl: signedUrl,
    });
  } catch (error: any) {
    console.error("Error:", error);
    return NextResponse.json(
      { error: error.message },
      { status: error.status || 500 }
    );
  }
}
